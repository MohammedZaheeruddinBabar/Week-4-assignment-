#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

typedef pair<int, int> Edge;  // Represents (destination, weight)
typedef vector<vector<Edge>> Graph;

vector<int> dijkstra(int source, const Graph& graph) {
    int V = graph.size();
    vector<int> dist(V, INT_MAX);  // Store shortest distances
    priority_queue<Edge, vector<Edge>, greater<Edge>> pq;

    dist[source] = 0;
    pq.push({0, source});

    while (!pq.empty()) {
        int currentDist = pq.top().first;
        int u = pq.top().second;
        pq.pop();

        if (currentDist > dist[u]) continue;

        for (const auto& neighbor : graph[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;

            // Relaxation step
            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                pq.push({dist[v], v});
            }
        }
    }

    return dist;
}

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    Graph graph(V);

    cout << "Enter the edges in the format (u v w) where u and v are vertices and w is the weight:\n";
    for (int i = 0; i < E; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({v, w});
        graph[v].push_back({u, w});  // Remove this line if the graph is directed
    }

    int source;
    cout << "Enter the source vertex: ";
    cin >> source;

    vector<int> distances = dijkstra(source, graph);

    cout << "Shortest distances from source " << source << ":\n";
    for (int i = 0; i < V; ++i) {
        if (distances[i] == INT_MAX) {
            cout << "Vertex " << i << ": INF (unreachable)\n";
        } else {
            cout << "Vertex " << i << ": " << distances[i] << "\n";
        }
    }

    return 0;
}
